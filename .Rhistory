library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DataZonRiesgos/")
nombrecr <- c("Social","Trabajo","Sin nexo","Familiar","Viaje","Intrahospitalario","Centro \npenitenciario","Viaje","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Hogares de \nlarga estancia","Sin nexo", "Sin nexo","Laboral","Familiar","NA") #
nombres <- c("Sin nexo","Transmisión\ncomunitaria","Social","Familiar","Trabajo","Centro \npenitenciario","Hogares de\nlarga estancia","Viaje","Intrahospitalario")
data_bsanon <- read.csv2("data/tab/BASE ANONIMIZADA CASOS COVID 2020.csv",encoding = "UTF-8",sep = ",") # se lee la data
for (i in 1:3) { # Se separan los distritos de su código, para después unir con la capa de distrito
a <- str_split_fixed(data_bsanon[,7+i],":",2) # Se realize un split a la columna 7+i por ":" y se divide en dos
a <- as.data.frame(a) # Se convierte el resultado a dataframe
ifelse(exists("b"),assign("b",bind_cols(b,a)),assign("b",a)) # si ya existe el string "b" se asigna b al bind de b y a.
# si no existe se asigna "b"  al data frame "a"
}
colnames(b) <- c("provcod","prov","cantcod","cant","discod","dist") # se cambian los nombres de columna
data_bsanonfix <- bind_cols(b,data_bsanon[,c(-8,-9,-10)]) # se excluyen columnas que no interesan
for (i in seq(1:25)) {# quitan los espacios en blanco en TODAS las columnas
data_bsanonfix[,i] <- str_trim(data_bsanonfix[,i],side = "both") # específicamente los espacios al final y al inicio
}
data_bsanonfix[125489,25] <- "NA" # Se asigna NA a un dato específico
unicr <- unique(data_bsanonfix$TIPO.DE.NEXO) # Se extran los valores unicos de esa columna
for (i in seq(1,length(nombrecr))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$TIPO.DE.NEXO <- str_replace_all(data_bsanonfix$TIPO.DE.NEXO, # columna donde se busca
unicr[i],nombrecr[i]) # patrón de búsqueda y valor a poner
}
dir <- "~/GitHub/DataZonRiesgos/data/tab/BDACR_2020"
file.exists(dir)
View(data_bsanonfix)
if (file.exists(dir)) {
print("La tabla se encuentra en la carpeta data, carpeta tab. Se llama 'BDACR_2020'")
}else{
write.csv(data_bsanonfix,"BDACR_2020")
}
if (file.exists(dir)) {
print("La tabla se encuentra en la carpeta data, carpeta tab. Se llama 'BDACR_2020'")
}else{
write.csv(data_bsanonfix,"~/GitHub/DataZonRiesgos/data/tab/BDACR_2020.csv")
}
unique(data_bsanonfix$HOSPITALIZADO)
aa <- unique(data_bsanonfix$HOSPITALIZADO)
unique(data_bsanonfix$PAÍS.VISITADO)
unique(data_bsanonfix$CLASIFICACION.FINAL)
unique(data_bsanonfix$FALLECIDO)
unique(data_bsanonfix$RECUPERADO)
unique(data_bsanonfix$FECHA.RECUPERADO)
unique(data_bsanonfix$HOSPITALIZADO)
unique(data_bsanonfix$HOSPITALIZADO)
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DataZonRiesgos/")
dir <- "~/GitHub/DataZonRiesgos/data/tab/BDACR_2020"
nombrecr <- c("Social","Trabajo","Sin nexo","Familiar","Viaje","Intrahospitalario","Centro \npenitenciario","Viaje","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Hogares de \nlarga estancia","Sin nexo", "Sin nexo","Laboral","Familiar","NA") #
nombres <- c("Sin nexo","Transmisión\ncomunitaria","Social","Familiar","Trabajo","Centro \npenitenciario","Hogares de\nlarga estancia","Viaje","Intrahospitalario")
hosp <- c("NO","SI","Si","No","si","N/D")
hosp_s <- c("No","Si","Si","No","Si","N/D")
clas <- c("AUTOCTONO","IMPORTADO","autoctono","AUTÓCTONO")
clas_s <- c("Autóctono","Importado","Autóctono","Autóctono")
fall <- c("NO","SI","no","No")
fall_s <- c("No","Si","No","No")
data_bsanon <- read.csv2("data/tab/BASE ANONIMIZADA CASOS COVID 2020.csv",encoding = "UTF-8",sep = ",") # se lee la data
for (i in 1:3) { # Se separan los distritos de su código, para después unir con la capa de distrito
a <- str_split_fixed(data_bsanon[,7+i],":",2) # Se realize un split a la columna 7+i por ":" y se divide en dos
a <- as.data.frame(a) # Se convierte el resultado a dataframe
ifelse(exists("b"),assign("b",bind_cols(b,a)),assign("b",a)) # si ya existe el string "b" se asigna b al bind de b y a.
# si no existe se asigna "b"  al data frame "a"
}
colnames(b) <- c("provcod","prov","cantcod","cant","discod","dist") # se cambian los nombres de columna
data_bsanonfix <- bind_cols(b,data_bsanon[,c(-8,-9,-10)]) # se excluyen columnas que no interesan
for (i in seq(1:25)) {# quitan los espacios en blanco en TODAS las columnas
data_bsanonfix[,i] <- str_trim(data_bsanonfix[,i],side = "both") # específicamente los espacios al final y al inicio
}
data_bsanonfix[125489,25] <- "NA" # Se asigna NA a un dato específico
unicr <- unique(data_bsanonfix$TIPO.DE.NEXO) # Se extran los valores unicos de esa columna
for (i in seq(1,length(nombrecr))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$TIPO.DE.NEXO <- str_replace_all(data_bsanonfix$TIPO.DE.NEXO, # columna donde se busca
unicr[i],nombrecr[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(hosp))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$HOSPITALIZADO <- str_replace_all(data_bsanonfix$HOSPITALIZADO, # columna donde se busca
hosp[i],hosp_s[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(clas))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$CLASIFICACION.FINAL <- str_replace_all(data_bsanonfix$CLASIFICACION.FINAL, # columna donde se busca
clas[i],clas_s[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(clas))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$FALLECIDO <- str_replace_all(data_bsanonfix$FALLECIDO, # columna donde se busca
fall[i],fall_s[i]) # patrón de búsqueda y valor a poner
}
data_bsanonfix <- data_bsanonfix[,c(-15,-16,-17)]
if (file.exists(dir)) {
print("La tabla se encuentra en la carpeta data, carpeta tab. Se llama 'BDACR_2020'")
}else{
write.csv(data_bsanonfix,"~/GitHub/DataZonRiesgos/data/tab/BDACR_2020.csv")
}
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DataZonRiesgos/")
dir <- "~/GitHub/DataZonRiesgos/data/tab/BDACR_2020"
nombrecr <- c("Social","Trabajo","Sin nexo","Familiar","Viaje","Intrahospitalario","Centro \npenitenciario","Viaje","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Hogares de \nlarga estancia","Sin nexo", "Sin nexo","Laboral","Familiar","NA") #
nombres <- c("Sin nexo","Transmisión\ncomunitaria","Social","Familiar","Trabajo","Centro \npenitenciario","Hogares de\nlarga estancia","Viaje","Intrahospitalario")
hosp <- c("NO","SI","Si","No","si","N/D")
hosp_s <- c("No","Si","Si","No","Si","N/D")
clas <- c("AUTOCTONO","IMPORTADO","autoctono","AUTÓCTONO")
clas_s <- c("Autóctono","Importado","Autóctono","Autóctono")
fall <- c("NO","SI","no","No")
fall_s <- c("No","Si","No","No")
data_bsanon <- read.csv2("data/tab/BASE ANONIMIZADA CASOS COVID 2020.csv",encoding = "UTF-8",sep = ",") # se lee la data
for (i in 1:3) { # Se separan los distritos de su código, para después unir con la capa de distrito
a <- str_split_fixed(data_bsanon[,7+i],":",2) # Se realize un split a la columna 7+i por ":" y se divide en dos
a <- as.data.frame(a) # Se convierte el resultado a dataframe
ifelse(exists("b"),assign("b",bind_cols(b,a)),assign("b",a)) # si ya existe el string "b" se asigna b al bind de b y a.
# si no existe se asigna "b"  al data frame "a"
}
View(b)
View(a)
colnames(b) <- c("provcod","prov","cantcod","cant","discod","dist") # se cambian los nombres de columna
data_bsanonfix <- bind_cols(b,data_bsanon[,c(-8,-9,-10)]) # se excluyen columnas que no interesan
for (i in seq(1:25)) {# quitan los espacios en blanco en TODAS las columnas
data_bsanonfix[,i] <- str_trim(data_bsanonfix[,i],side = "both") # específicamente los espacios al final y al inicio
}
data_bsanonfix[125489,25] <- "NA" # Se asigna NA a un dato específico
unicr <- unique(data_bsanonfix$TIPO.DE.NEXO) # Se extran los valores unicos de esa columna
for (i in seq(1,length(nombrecr))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$TIPO.DE.NEXO <- str_replace_all(data_bsanonfix$TIPO.DE.NEXO, # columna donde se busca
unicr[i],nombrecr[i]) # patrón de búsqueda y valor a poner
}
View(data_bsanonfix)
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DataZonRiesgos/")
dir <- "~/GitHub/DataZonRiesgos/data/tab/BDACR_2020"
nombrecr <- c("Social","Trabajo","Sin nexo","Familiar","Viaje","Intrahospitalario","Centro \npenitenciario","Viaje","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Hogares de \nlarga estancia","Sin nexo", "Sin nexo","Laboral","Familiar","NA") #
nombres <- c("Sin nexo","Transmisión\ncomunitaria","Social","Familiar","Trabajo","Centro \npenitenciario","Hogares de\nlarga estancia","Viaje","Intrahospitalario")
hosp <- c("NO","SI","Si","No","si","N/D")
hosp_s <- c("No","Si","Si","No","Si","N/D")
clas <- c("AUTOCTONO","IMPORTADO","autoctono","AUTÓCTONO")
clas_s <- c("Autóctono","Importado","Autóctono","Autóctono")
fall <- c("NO","SI","no","No")
fall_s <- c("No","Si","No","No")
data_bsanon <- read.csv2("data/tab/BASE ANONIMIZADA CASOS COVID 2020.csv",encoding = "UTF-8",sep = ",") # se lee la data
for (i in 1:3) { # Se separan los distritos de su código, para después unir con la capa de distrito
a <- str_split_fixed(data_bsanon[,7+i],":",2) # Se realize un split a la columna 7+i por ":" y se divide en dos
a <- as.data.frame(a) # Se convierte el resultado a dataframe
ifelse(exists("b"),assign("b",bind_cols(b,a)),assign("b",a)) # si ya existe el string "b" se asigna b al bind de b y a.
# si no existe se asigna "b"  al data frame "a"
}
colnames(b) <- c("provcod","prov","cantcod","cant","discod","dist") # se cambian los nombres de columna
data_bsanonfix <- bind_cols(b,data_bsanon[,c(-8,-9,-10)]) # se excluyen columnas que no interesan
for (i in seq(1:25)) {# quitan los espacios en blanco en TODAS las columnas
data_bsanonfix[,i] <- str_trim(data_bsanonfix[,i],side = "both") # específicamente los espacios al final y al inicio
}
data_bsanonfix[125489,25] <- "NA" # Se asigna NA a un dato específico
unicr <- unique(data_bsanonfix$TIPO.DE.NEXO) # Se extran los valores unicos de esa columna
for (i in seq(1,length(nombrecr))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$TIPO.DE.NEXO <- str_replace_all(data_bsanonfix$TIPO.DE.NEXO, # columna donde se busca
unicr[i],nombrecr[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(hosp))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$HOSPITALIZADO <- str_replace_all(data_bsanonfix$HOSPITALIZADO, # columna donde se busca
hosp[i],hosp_s[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(clas))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$CLASIFICACION.FINAL <- str_replace_all(data_bsanonfix$CLASIFICACION.FINAL, # columna donde se busca
clas[i],clas_s[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(clas))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$FALLECIDO <- str_replace_all(data_bsanonfix$FALLECIDO, # columna donde se busca
fall[i],fall_s[i]) # patrón de búsqueda y valor a poner
}
data_bsanonfix <- data_bsanonfix[,c(-13,-14,-15,-16,-17)]
if (file.exists(dir)) {
print("La tabla se encuentra en la carpeta data, carpeta tab. Se llama 'BDACR_2020'")
}else{
write.csv(data_bsanonfix,"~/GitHub/DataZonRiesgos/data/tab/BDACR_2020.csv")
}
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
unique(data_bsanonfix$FALLECIDO)
unique(data_bsanonfix$CLASIFICACION.FINAL)
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DataZonRiesgos/")
dir <- "~/GitHub/DataZonRiesgos/data/tab/BDACR_2020"
nombrecr <- c("Social","Trabajo","Sin nexo","Familiar","Viaje","Intrahospitalario","Centro \npenitenciario","Viaje","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Transmisión \ncomunitaria","Hogares de \nlarga estancia","Sin nexo", "Sin nexo","Laboral","Familiar","NA") #
nombres <- c("Sin nexo","Transmisión\ncomunitaria","Social","Familiar","Trabajo","Centro \npenitenciario","Hogares de\nlarga estancia","Viaje","Intrahospitalario")
hosp <- c("NO","SI","Si","No","si","N/D")
hosp_s <- c("No","Si","Si","No","Si","N/D")
clas <- c("AUTOCTONO","IMPORTADO","autoctono","AUTÓCTONO")
clas_s <- c("Autóctono","Importado","Autóctono","Autóctono")
fall <- c("NO","SI","no","No")
fall_s <- c("No","Si","No","No")
data_bsanon <- read.csv2("data/tab/BASE ANONIMIZADA CASOS COVID 2020.csv",encoding = "UTF-8",sep = ",") # se lee la data
for (i in 1:3) { # Se separan los distritos de su código, para después unir con la capa de distrito
a <- str_split_fixed(data_bsanon[,7+i],":",2) # Se realize un split a la columna 7+i por ":" y se divide en dos
a <- as.data.frame(a) # Se convierte el resultado a dataframe
ifelse(exists("b"),assign("b",bind_cols(b,a)),assign("b",a)) # si ya existe el string "b" se asigna b al bind de b y a.
# si no existe se asigna "b"  al data frame "a"
}
colnames(b) <- c("provcod","prov","cantcod","cant","discod","dist") # se cambian los nombres de columna
data_bsanonfix <- bind_cols(b,data_bsanon[,c(-8,-9,-10)]) # se excluyen columnas que no interesan
for (i in seq(1:25)) {# quitan los espacios en blanco en TODAS las columnas
data_bsanonfix[,i] <- str_trim(data_bsanonfix[,i],side = "both") # específicamente los espacios al final y al inicio
}
data_bsanonfix[125489,25] <- "NA" # Se asigna NA a un dato específico
unicr <- unique(data_bsanonfix$TIPO.DE.NEXO) # Se extran los valores unicos de esa columna
for (i in seq(1,length(nombrecr))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$TIPO.DE.NEXO <- str_replace_all(data_bsanonfix$TIPO.DE.NEXO, # columna donde se busca
unicr[i],nombrecr[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(hosp))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$HOSPITALIZADO <- str_replace_all(data_bsanonfix$HOSPITALIZADO, # columna donde se busca
hosp[i],hosp_s[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(clas))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$CLASIFICACION.FINAL <- str_replace_all(data_bsanonfix$CLASIFICACION.FINAL, # columna donde se busca
clas[i],clas_s[i]) # patrón de búsqueda y valor a poner
}
for (i in seq(1,length(clas))) { # Busca y sustituye todos los carácteres de unicr por los de nombrecr
data_bsanonfix$FALLECIDO <- str_replace_all(data_bsanonfix$FALLECIDO, # columna donde se busca
fall[i],fall_s[i]) # patrón de búsqueda y valor a poner
}
data_bsanonfix <- data_bsanonfix[,c(-13,-14,-15,-16,-17)]
if (file.exists(dir)) {
print("La tabla se encuentra en la carpeta data, carpeta tab. Se llama 'BDACR_2020'")
}else{
write.csv(data_bsanonfix,"~/GitHub/DataZonRiesgos/data/tab/BDACR_2020.csv")
}
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
# Base con las enfermedades en formato ancho y otros arreglos que facilitan el análisis
#####################################################
# Describir las principales fuentes de contagio en Cartago (trabajo, social, etc.)
data_bsanoncartago <- filter(data_bsanonfix, cant == "Cartago")
cart <- data_bsanoncartago %>% count(TIPO.DE.NEXO,sort = TRUE)
cart$prov <- rep("Cartago",dim(cart)[1])
cart$porc <- ((cart$n)/sum(cart$n))*100
# Describir las principales fuentes de contagio en San José (trabajo, social, etc.)
data_bsanonsanjose <- filter(data_bsanonfix, cant == "San Jose")
sanjo <- data_bsanonsanjose %>% count(TIPO.DE.NEXO,sort = TRUE)
sanjo$prov <- rep("San José",dim(sanjo)[1])
sanjo$porc <- ((sanjo$n)/sum(sanjo$n))*100
#####################################################
# Describir las principales fuentes de contagio en Costa Rica (trabajo, social, etc.)
data_bsanon_cr <- data_bsanonfix
data_bsanon_cr %>% count(TIPO.DE.NEXO,sort = TRUE)
cr <- data_bsanon_cr %>% count(TIPO.DE.NEXO,sort = TRUE)
cr$prov <- rep("Costa Rica",dim(cr)[1])
cr$porc <- ((cr$n)/sum(cr$n))*100
##############################
#z <- bind_rows(sanjo,cart,cr) #Unión de tabla de San Jose y Cartago Y Costa Rica.
z <- bind_rows(cart,cr) #Unión de tabla de Costa Rica y Cartago.
z$porc <- round(z$porc,2)
z <- z[-20,]
unique(z$TIPO.DE.NEXO)
z2 <- z[c(-1,-10,-19),] # Remoción de registros "Sin nexo"
rem <- c("a","b","data_bsanon")
rm(list = rem)
p <- ggplot(z, aes(TIPO.DE.NEXO, porc, fill = prov)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
ylab("Porcentaje del total") +
xlab("Tipo de nexo") +
geom_text(data = z, aes(x = TIPO.DE.NEXO, group=prov, y = porc + 2.5,
label = format(porc, nsmall = 0, digits=1, scientific = FALSE)),
color="black", position=position_dodge(.9), hjust=.5) +
theme_classic(base_size = 17)
p + labs(title = "Tipos de nexo en el año 2020", fill = "Unidad",caption = paste0("Total Cartago:     ",
as.character(sum(cart$n)),
"\n                  ",
"Total Costa Rica: ",
as.character(sum(cr$n))))
paste0("Considerar que en Costa Rica el  ",)
rem <- c("data_bsanonsanjose","data_bsanon_cr","cr","z","z2")
rm(list = rem)
df_TC <- data_bsanonfix %>% filter(CODIGO.DE.ASOCIACIÓN == "TC")
#####################################################
# Describir las principales fuentes de contagio en Cartago (trabajo, social, etc.)
data_bsanoncartago <- filter(df_TC, cant == "Cartago")
cart <- data_bsanoncartago %>% count(TIPO.DE.NEXO,sort = TRUE)
df_TC <- data_bsanonfix %>% filter(CODIGO.DE.ASOCIACIÓN == "TC")
#####################################################
# Describir las principales fuentes de contagio en Cartago (trabajo, social, etc.)
data_bsanoncartago <- filter(df_TC, cant == "Cartago")
cart <- data_bsanoncartago %>% count(TIPO.DE.NEXO,sort = TRUE)
cart$prov <- rep("Cartago",dim(cart)[1])
cart$porc <- ((cart$n)/sum(cart$n))*100
# Describir las principales fuentes de contagio en San José (trabajo, social, etc.)
data_bsanonsanjose <- filter(df_TC, cant == "San Jose")
sanjo <- data_bsanonsanjose %>% count(TIPO.DE.NEXO,sort = TRUE)
sanjo$prov <- rep("San José",dim(sanjo)[1])
sanjo$porc <- ((sanjo$n)/sum(sanjo$n))*100
#####################################################
# Describir las principales fuentes de contagio en Costa Rica (trabajo, social, etc.)
data_bsanon_cr <- df_TC
data_bsanon_cr %>% count(TIPO.DE.NEXO,sort = TRUE)
cr <- data_bsanon_cr %>% count(TIPO.DE.NEXO,sort = TRUE)
cr$prov <- rep("Costa Rica",dim(cr)[1])
cr$porc <- ((cr$n)/sum(cr$n))*100
##############################
#z <- bind_rows(sanjo,cart,cr) #Unión de tabla de San Jose y Cartago Y Costa Rica.
z <- bind_rows(cart,cr) #Unión de tabla de Costa Rica y Cartago.
z$porc <- round(z$porc,2)
z <- z[-20,]
unique(z$TIPO.DE.NEXO)
z2 <- z[c(-1,-10,-19),] # Remoción de registros "Sin nexo"
rem <- c("a","b","data_bsanon")
rm(list = rem)
p <- ggplot(z, aes(TIPO.DE.NEXO, porc, fill = prov)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set2") +
ylab("Porcentaje del total") +
xlab("Tipo de nexo") +
geom_text(data = z, aes(x = TIPO.DE.NEXO, group=prov, y = porc + 2.5,
label = format(porc, nsmall = 0, digits=1, scientific = FALSE)),
color="black", position=position_dodge(.9), hjust=.5) +
theme_classic(base_size = 17)
p + labs(title = "Tipos de nexo en el conglomerado TC", fill = "Unidad",caption = paste0("Total Cartago:     ",
as.character(sum(cart$n)),
"\n                  ",
"Total Costa Rica: ",
as.character(sum(cr$n))))
paste0("Considerar que en Costa Rica el  ",)
rem <- c("data_bsanonsanjose","data_bsanon_cr","cr","z","z2")
